# tasky-app-combined.yaml

# Kubernetes Secret for Database Credentials (NOTE: This should be created ONCE, BEFORE applying this combined file)
# kubectl create secret generic mongodb-credentials \
#   --from-literal=database_url="mongodb://myAppUser:myAppPassword@10.0.1.100:27017/tasky_db?authSource=admin" \
#   --namespace default
# Make sure the above command is run first with your actual database connection string.

---
# 1. Deployment for the tasky-app web application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tasky-app-deployment
  labels:
    app: tasky-app
spec:
  replicas: 2 # You can adjust the number of replicas
  selector:
    matchLabels:
      app: tasky-app
  template:
    metadata:
      labels:
        app: tasky-app
    spec:
      serviceAccountName: webapp-admin-sa # Use IAM Roles for Service Accounts (IRSA) for secure ECR pull.
      # Uncomment and adjust if you've set up an IAM Role for Service Account named 'ecr-image-puller'
      # serviceAccountName: ecr-image-puller

      containers:
      - name: tasky-container
        image: 396913737827.dkr.ecr.us-west-2.amazonaws.com/yashaswi:latest # Your ECR image URI
        ports:
        - containerPort: 8080 # Default port for Tasky app
        env:
        - name: MONGODB_URI # Environment variable name expected by Tasky's config.py
          valueFrom:
            secretKeyRef:
              name: mongodb-secret # Name of the Secret created earlier
              key: uri        # Key within that Secret
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: tasky-jwt-secret
              key: SECRET_KEY      
        # Optional: Liveness and readiness probes for health checks
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5

---
# 2. Service to expose the tasky-app web application
apiVersion: v1
kind: Service
metadata:
  name: tasky-app-service
  labels:
    app: tasky-app
  annotations: # Add this section
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing # Add this line
spec:
  selector:
    app: tasky-app # Must match the labels on your deployment's pods
  type: LoadBalancer # This creates an AWS Load Balancer for public access
  ports:
    - protocol: TCP
      port: 80       # Port the Load Balancer listens on (standard HTTP)
      targetPort: 8080 # Port on the container (where Tasky app listens)

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: webapp-admin-sa
  namespace: default # IMPORTANT: Use the namespace where your application Deployment runs
  labels:
    app: tasky-app # Optional: Add a label for easier identification

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: webapp-admin-binding
  labels:
    app: tasky-app # Optional: Add a label
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin # Binds to the built-in cluster-admin role
subjects:
- kind: ServiceAccount
  name: webapp-admin-sa
  namespace: default # IMPORTANT: Must match the namespace of the ServiceAccount
